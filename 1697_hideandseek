#include <iostream>
#include <string.h>
#include <queue>

using namespace std;

//using BFS
//미해결

int N, K;
int check[100001] = {-1, };
queue<int> q;
int dir[3] = {1, -1, 0};

int bfs(int x){
    int cur = 0;
    int next = 0;
    q.push(x);
    check[x] = 0;
    
    while(!q.empty()){
        cur = q.front(); q.pop();
        
        /*
         if(cur == K) //동생 위치면
         break;
         */
        for(int i = 0; i < 3 ; i++){
            //next = (dir[i] == 0)? cur*2:cur+ dir[i];
            
            if(dir[i] == 0){
                next = cur * 2;
            }else{
                next = cur + dir[i];
            }
            
            /*
            if(cur == 100000){
                if(dir[i] != -1 )
                    continue;
            }else if(cur == 1 ){
                if(dir[i] == -1)
                    continue;
            }
             */
            if(next > 100000 || next < 1){
                continue;
            }
            if(check[next] == -1 || (check[next] != -1 && (check[next] > check[cur] + 1))){
                q.push(next);
                check[next] = check[cur] + 1;
            }
            /*
            if(check[next] == -1){
                check[next] = check[cur] + 1;
                q.push(next);
            }else if(check[next] > check[cur] + 1){
                check[next] = check[cur] + 1;
                q.push(next);
            }
            */
            /*
            if(next == K)
                break;
             */
        }
    }
    return check[K];
}

int main(void){
    N = K = 0;
    memset(check, -1, 100001);
    
    scanf("%d %d", &N, &K);
    printf("%d\n",bfs(N));
    
    //printf("%d\n", check[K]);
    
    return 0;
}
